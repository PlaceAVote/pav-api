swagger: '2.0'
info:
  version: 0.0.0
  title: 'PlaceAVote user api'
  description: 'PlaceAVote user api for registering and authenticating existing users'
consumes:
  - application/json
produces:
  - application/json
parameters:
  ConfirmTokenParam:
    name: confirm-token
    in: path
    required: true
    type: string
    format: string
  TokenParam:
    name: Authorization
    in: header
    description: token to be passed as a header
    required: true
    type: string
    items:
      type: string
      format: PAV_AUTH_TOKEN token
  UserIDParam:
    name: user_id
    in: path
    required: true
    type: string
    format: string
  PageParam:
    name: page
    in: query
    required: false
    type: string
    format: string
  NotificationIDParam:
    name: notification_id
    in: path
    description: Event ID associated with Notification
    required: true
    type: string
    format: string
  LoginBodyParam:
    name: Login
    in: body
    required: true
    schema:
      $ref: "#/definitions/LoginBody"
  FacebookLoginBodyParam:
    name: Login
    in: body
    required: true
    schema:
      $ref: "#/definitions/FacebookLoginBody"
  ConfirmPasswordResetBodyParam:
    name: Confirm New Password
    in: body
    required: true
    schema:
      $ref: "#/definitions/ConfirmPasswordBody"
  UserFollowBodyParam:
    name: User to follow
    in: body
    required: true
    schema:
      $ref: "#/definitions/UserFollowBody"
  TokenBodyParam:
    name: token
    in: query
    required: true
    type: string
    format: string
  NewFacebookUserProfileBodyParam:
    name: NewUser
    in: body
    required: true
    schema:
      $ref: "#/definitions/NewFacebookUserProfileBody"
  NewUserProfileBodyParam:
    name: NewUser
    in: body
    required: true
    schema:
      $ref: "#/definitions/NewUserProfileBody"
definitions:
  ConfirmPasswordBody:
    title: ConfirmPassword
    type: object
    properties:
      reset_token:
        type: string
        format: string
      new_password:
        type: string
        format: string
  UserProfileResponse:
    title: UserProfile
    type: object
    properties:
      user_id:
        type: string
        format: string
      first_name:
        type: string
      last_name:
        type: string
      dob:
        type: string
        format: 01/10/1999
      country_code:
        type: string
        format: USA
      following:
        type: boolean
        format: boolean
      total_followers:
        type: number
        format: number
      total_following:
        type: number
        format: number
  NewFacebookUserProfileBody:
    title: NewUserProfile
    type: object
    properties:
      email:
        type: string
        format: test@place.com
      token:
        type: string
      first_name: 
        type: string
      last_name:
        type: string
      dob:
        type: string
        format: 01/10/1999
      country_code:
        type: string
        format: USA
      img_url:
        type: string
        format: string
      topics:
        type: array
        items:
          type: string
          format: '[Defence, Arts]'
  NewUserProfileBody:
    title: NewUserProfile
    type: object
    properties:
      email:
        type: string
        format: test@place.com
      password:
        type: string
      first_name: 
        type: string
      last_name:
        type: string
      dob:
        type: string
        format: 01/10/1999
      country_code:
        type: string
        format: USA
      topics:
        type: array
        items:
          type: string
          format: '[Defence, Arts]'
  NewUserProfileResponse:
    type: object
    properties:
      user_id:
        type: string
        format: string
      email:
        type: string
        format: test@place.com
      first_name:
        type: string
      last_name:
        type: string
      dob:
        type: string
        format: 01/10/1999
      country_code:
        type: string
        format: USA
      topics:
        type: array
        items:
          type: string
          format: '[Defence, Arts]'
      token:
        type: string
  UserFollowBody:
    type: object
    properties:
      user_id:
        type: string
        format: string  
  UserFollowingRecords:
    type: array
    items:
      $ref: "#/definitions/UserFollowingRecord"
  UserFollowingRecord:
    type: object
    properties:
        user_id:
          type: string
          format: string
        first_name:
          type: string
        last_name:
          type: string
        img_url:
          type: string
        follower_count:
          type: number
          format: number
  FacebookLoginBody:
    type: object
    properties:
      email:
        type: string
        format: test@place.com
      token:
        type: string
  LoginBody:
    type: object
    properties:
      email:
        type: string
        format: test@place.com
      password:
        type: string
  NewTokenResponse:
    type: object
    properties:
      token:
        type: string
  FeedEventRecords:
    type: array
    items:
      $ref: "#/definitions/FeedEventRecord"
  FeedEventRecord:
    type: object
    properties:
      user_id:
        type: string
        format: string
      type:
        type: string
        format: string
      timestamp:
        type: number
        format: number
  TimelineEventRecords:
    type: object
    properties:
      next-page:
        type: number
        format: If equal to zero then there are no more results
      results:
        type: array
        items:
          $ref: "#/definitions/TimelineEventRecord"
  TimelineEventRecord:
    type: object
    properties:
      user_id:
        type: string
        format: string
      type:
        type: string
        format: string
      timestamp:
        type: number
        format: number
  NotificationRecords:
    type: object
    properties:
      next-page:
        type: number
        format: If equal to zero then there are no more results
      results:
        type: array
        items:
          $ref: "#/definitions/NotificationRecord"
  NotificationRecord:
    type: object
    properties:
      type:
        type: string
        format: reply
      user_id:
        type: string
        format: string
      timestamp:
        type: number
        format: number
      read:
        type: boolean
        format: boolean
paths:
  /user/feed:
    get:
      description: Get the current users feed
      parameters:
        - $ref: "#/parameters/TokenParam"
      tags:
        - Users
      responses:
        '200':
          description: Successful response
          schema:
            $ref: "#/definitions/FeedEventRecords"
        '401':
          description: Not Authorized (Check Authentication Token)
      x-amazon-apigateway-auth:
        type: none
      x-amazon-apigateway-integration:
        type: http
        httpMethod: get
        uri: http://pav-user-api-924234322.us-east-1.elb.amazonaws.com:8080/user/feed
        requestParameters:
          integration.request.header.Authorization: "method.request.header.Authorization"
        requestTemplates:
          application/json:
        responses:
          200:
            statusCode: "200"
            responseTemplates:
              application/json:
          default:
            statusCode: "401"
            responseTemplates:
              text/plain:
  /user/{user_id}/timeline:
    get:
      description: Given a user ID then retrieve that users personal timeline
      parameters:
        - $ref: "#/parameters/UserIDParam"
        - $ref: "#/parameters/PageParam"
        - $ref: "#/parameters/TokenParam"
      tags:
        - Users
      responses:
        '200':
          description: Successful response
          schema:
            $ref: "#/definitions/TimelineEventRecords"
        '401':
          description: Not Authorized (Check Authentication Token)
      x-amazon-apigateway-auth:
        type: none
      x-amazon-apigateway-integration:
        type: http
        httpMethod: get
        uri: http://pav-user-api-924234322.us-east-1.elb.amazonaws.com:8080/user/{user_id}/timeline
        requestParameters:
          integration.request.header.Authorization: "method.request.header.Authorization"
          integration.request.path.user_id: "method.request.path.user_id"
          integration.request.querystring.page: "method.request.querystring.page"
        requestTemplates:
          application/json:
        responses:
          200:
            statusCode: "200"
            responseTemplates:
              application/json:
          default:
            statusCode: "401"
            responseTemplates:
              text/plain:
  /user/me/timeline:
    get:
      description: Given a user ID then retrieve that users personal timeline
      parameters:
        - $ref: "#/parameters/PageParam"
        - $ref: "#/parameters/TokenParam"
      tags:
        - Users
      responses:
        '200':
          description: Successful response
          schema:
            $ref: "#/definitions/TimelineEventRecords"
        '401':
          description: Not Authorized (Check Authentication Token)
      x-amazon-apigateway-auth:
        type: none
      x-amazon-apigateway-integration:
        type: http
        httpMethod: get
        uri: http://pav-user-api-924234322.us-east-1.elb.amazonaws.com:8080/user/me/timeline
        requestParameters:
          integration.request.header.Authorization: "method.request.header.Authorization"
          integration.request.querystring.page: "method.request.querystring.page"
        requestTemplates:
          application/json:
        responses:
          200:
            statusCode: "200"
            responseTemplates:
              application/json:
          default:
            statusCode: "401"
            responseTemplates:
              text/plain:
  /user/notification/{notification_id}/mark:
    post:
      description: Mark notification if user has read it
      parameters:
        - $ref: "#/parameters/NotificationIDParam"
        - $ref: "#/parameters/TokenParam"
      tags:
        - Users
      responses:
        '201':
          description: Successful response
        '401':
          description: Not Authorized (Check Authentication Token)
      x-amazon-apigateway-auth:
        type: none
      x-amazon-apigateway-integration:
        type: http
        httpMethod: post
        uri: http://pav-user-api-924234322.us-east-1.elb.amazonaws.com:8080/user/notification/{notification_id}/mark
        requestParameters:
          integration.request.header.Authorization: "method.request.header.Authorization"
          integration.request.path.notification_id: "method.request.path.notification_id"
        requestTemplates:
          application/json:
        responses:
          201:
            statusCode: "201"
            responseTemplates:
              application/json:
          default:
            statusCode: "401"
            responseTemplates:
              text/plain:
  /user/notifications:
    get:
      description: Get the current users notifications
      parameters:
        - $ref: "#/parameters/TokenParam"
      tags:
        - Users
      responses:
        '200':
          description: Successful response
          schema:
            $ref: "#/definitions/NotificationRecords"
        '401':
          description: Not Authorized (Check Authentication Token)
      x-amazon-apigateway-auth:
        type: none
      x-amazon-apigateway-integration:
        type: http
        httpMethod: get
        uri: http://pav-user-api-924234322.us-east-1.elb.amazonaws.com:8080/user/notifications
        requestParameters:
          integration.request.header.Authorization: "method.request.header.Authorization"
        requestTemplates:
          application/json:
        responses:
          200:
            statusCode: "200"
            responseTemplates:
              application/json:
          default:
            statusCode: "401"
            responseTemplates:
              text/plain:
  /user/facebook:
    put:
      description: Register new user
      parameters:
        - $ref: "#/parameters/NewFacebookUserProfileBodyParam"
      tags:
        - Users  
      responses:
        '201':
          description: Successful response
          schema:
            $ref: "#/definitions/NewUserProfileResponse"
        '400':
          description: Bad Request (Check body of request)
      x-amazon-apigateway-auth:
        type: none
      x-amazon-apigateway-integration:
        type: http
        httpMethod: put
        uri: http://pav-user-api-924234322.us-east-1.elb.amazonaws.com:8080/user/facebook
        requestTemplates:
          application/json:
        responses:
          201:
            statusCode: "201"
            responseTemplates:
              application/json:
          default:
            statusCode: "401"
            responseTemplates:
              text/plain:
  /user/me/profile:
    get:
      description: Given a user_id retrieve user profile in relation to current user.
      parameters:
        - $ref: "#/parameters/TokenParam"
      tags:
        - Users
      responses:
        '200':
          description: Successful response
          schema:
            $ref: "#/definitions/UserProfileResponse"
        '401':
          description: Not Authorized (Check Authentication Token)
      x-amazon-apigateway-auth:
        type: none
      x-amazon-apigateway-integration:
        type: http
        httpMethod: get
        uri: http://pav-user-api-924234322.us-east-1.elb.amazonaws.com:8080/user/me/profile
        requestParameters:
          integration.request.header.Authorization: "method.request.header.Authorization"
        requestTemplates:
          application/json:
        responses:
          200:
            statusCode: "200"
            responseTemplates:
              application/json:
          default:
            statusCode: "401"
            responseTemplates:
              text/plain:
  /user/{user_id}/profile:
    get:
      description: Given a user_id retrieve user profile in relation to current user.
      parameters:
        - $ref: "#/parameters/TokenParam"
        - $ref: "#/parameters/UserIDParam"
      tags:
        - Users
      responses:
        '200':
          description: Successful response
          schema:
            $ref: "#/definitions/UserProfileResponse"
        '401':
          description: Not Authorized (Check Authentication Token)
      x-amazon-apigateway-auth:
        type: none
      x-amazon-apigateway-integration:
        type: http
        httpMethod: get
        uri: http://pav-user-api-924234322.us-east-1.elb.amazonaws.com:8080/user/{user_id}/profile
        requestParameters:
          integration.request.header.Authorization: "method.request.header.Authorization"
          integration.request.path.user_id: "method.request.path.user_id"
        requestTemplates:
          application/json:
        responses:
          200:
            statusCode: "200"
            responseTemplates:
              application/json:
          default:
            statusCode: "401"
            responseTemplates:
              text/plain:
  /user:
    put:
      description: Register new user
      parameters:
        - $ref: "#/parameters/NewUserProfileBodyParam"
      tags:
        - Users  
      responses:
        '201':
          description: Successful response
          schema:
            $ref: "#/definitions/NewUserProfileResponse"
        '400':
          description: Bad Request (Check body of request)
      x-amazon-apigateway-auth:
        type: none
      x-amazon-apigateway-integration:
        type: http
        httpMethod: put
        uri: http://pav-user-api-924234322.us-east-1.elb.amazonaws.com:8080/user
        requestTemplates:
          application/json:
        responses:
          201:
            statusCode: "201"
            responseTemplates:
              application/json:
          default:
            statusCode: "401"
            responseTemplates:
              text/plain:
  /user/authenticate:
    post:
      description: Authenticate existing user
      parameters:
        - $ref: "#/parameters/LoginBodyParam"
      tags:
        - Users
      responses:
        '200':
          description: Successful response
          schema:
            $ref: "#/definitions/NewTokenResponse"
        '401':
          description: Not Authorized
      x-amazon-apigateway-auth:
        type: none
      x-amazon-apigateway-integration:
        type: http
        httpMethod: post
        uri: http://pav-user-api-924234322.us-east-1.elb.amazonaws.com:8080/user/authenticate
        requestTemplates:
          application/json:
        responses:
          201:
            statusCode: "201"
            responseTemplates:
              application/json:
          default:
            statusCode: "401"
            responseTemplates:
              text/plain:
  /user/facebook/authenticate:
    post:
      description: Authenticate existing user
      parameters:
        - $ref: "#/parameters/FacebookLoginBodyParam"
      tags:
        - Users
      responses:
        '201':
          description: Successful response
          schema:
            $ref: "#/definitions/NewTokenResponse"
        '401':
          description: Not Authorized
      x-amazon-apigateway-auth:
        type: none
      x-amazon-apigateway-integration:
        type: http
        httpMethod: post
        uri: http://pav-user-api-924234322.us-east-1.elb.amazonaws.com:8080/user/facebook/authenticate
        requestTemplates:
          application/json:
        responses:
          201:
            statusCode: "201"
            responseTemplates:
              application/json:
          default:
            statusCode: "401"
            responseTemplates:
              text/plain:
  /password/reset:
    post:
      description: Authenticate existing user
      parameters:
        - name: email
          in: query
          required: true
          type: string
          format: string
      tags:
        - Users
      responses:
        '201':
          description: Successful response
        '401':
          description: Not Authorized
  /password/reset/confirm:
    post:
      description: Authenticate existing user
      parameters:
        - $ref: "#/parameters/ConfirmPasswordResetBodyParam"
      tags:
        - Users
      responses:
        '201':
          description: Successful response
        '401':
          description: Not Authorized
  /user/confirm/{confirm-token}:
    post:
      description: Confirm token sent in users email
      parameters:
        - $ref: "#/parameters/ConfirmTokenParam"
      tags:
        - Users
      responses:
        '201':
          description: Successful response
        '401':
          description: Confirmation token is invalid
      x-amazon-apigateway-auth:
        type: none
      x-amazon-apigateway-integration:
        type: http
        httpMethod: post
        uri: http://pav-user-api-924234322.us-east-1.elb.amazonaws.com:8080/user/confirm/{confirm-token}
        requestParameters:
          integration.request.path.confirm-token: "method.request.path.confirm-token"
        requestTemplates:
          application/json:
        responses:
          201:
            statusCode: "201"
            responseTemplates:
              application/json:
          default:
            statusCode: "401"
            responseTemplates:
              text/plain:
  /user/me/following:
    get:
      description: Get users the current logged in user is following
      parameters:
        - $ref: "#/parameters/TokenParam"
      tags:
        - Users
      responses:
        '200':
          description: Successful response
          schema:
            $ref: "#/definitions/UserFollowingRecords"
        '401':
          description: Not Authorized
      x-amazon-apigateway-auth:
        type: none
      x-amazon-apigateway-integration:
        type: http
        httpMethod: get
        uri: http://pav-user-api-924234322.us-east-1.elb.amazonaws.com:8080/user/me/following
        requestParameters:
          integration.request.header.Authorization: "method.request.header.Authorization"
        requestTemplates:
          application/json:
        responses:
          200:
            statusCode: "200"
            responseTemplates:
              application/json:
          default:
            statusCode: "401"
            responseTemplates:
              text/plain:
  /user/{user_id}/following:
    get:
      description: Given a user id, retrieve users they are following
      parameters:
        - $ref: "#/parameters/UserIDParam"
        - $ref: "#/parameters/TokenParam"
      tags:
        - Users
      responses:
        '200':
          description: Successful response
          schema:
            $ref: "#/definitions/UserFollowingRecords"
        '401':
          description: Not Authorized
      x-amazon-apigateway-auth:
        type: none
      x-amazon-apigateway-integration:
        type: http
        httpMethod: get
        uri: http://pav-user-api-924234322.us-east-1.elb.amazonaws.com:8080/user/{user_id}/following
        requestParameters:
          integration.request.header.Authorization: "method.request.header.Authorization"
          integration.request.path.user_id: "method.request.path.user_id"
        requestTemplates:
          application/json:
        responses:
          200:
            statusCode: "200"
            responseTemplates:
              application/json:
          default:
            statusCode: "401"
            responseTemplates:
              text/plain:
  /user/me/followers:
    get:
      description: Get users the current logged in user is followed by
      parameters:
        - $ref: "#/parameters/TokenParam"
      tags:
        - Users
      responses:
        '200':
          description: Successful response
          schema:
            $ref: "#/definitions/UserFollowingRecords"
        '401':
          description: Not Authorized
      x-amazon-apigateway-auth:
        type: none
      x-amazon-apigateway-integration:
        type: http
        httpMethod: get
        uri: http://pav-user-api-924234322.us-east-1.elb.amazonaws.com:8080/user/me/followers
        requestParameters:
          integration.request.header.Authorization: "method.request.header.Authorization"
        requestTemplates:
          application/json:
        responses:
          200:
            statusCode: "200"
            responseTemplates:
              application/json:
          default:
            statusCode: "401"
            responseTemplates:
              text/plain:
  /user/{user_id}/followers:
    get:
      description: Given a user id, retrieve users they are being followed by
      parameters:
        - $ref: "#/parameters/UserIDParam"
        - $ref: "#/parameters/TokenParam"
      tags:
        - Users
      responses:
        '200':
          description: Successful response
          schema:
            $ref: "#/definitions/UserFollowingRecords"
        '401':
          description: Not Authorized
      x-amazon-apigateway-auth:
        type: none
      x-amazon-apigateway-integration:
        type: http
        httpMethod: get
        uri: http://pav-user-api-924234322.us-east-1.elb.amazonaws.com:8080/user/{user_id}/followers
        requestParameters:
          integration.request.header.Authorization: "method.request.header.Authorization"
          integration.request.path.user_id: "method.request.path.user_id"
        requestTemplates:
          application/json:
        responses:
          200:
            statusCode: "200"
            responseTemplates:
              application/json:
          default:
            statusCode: "401"
            responseTemplates:
              text/plain:
  /user/follow:
    put:
      description: Follow a user
      parameters:
        - $ref: "#/parameters/UserFollowBodyParam"
        - $ref: "#/parameters/TokenParam"
      tags:
        - Users
      responses:
        '200':
          description: Successful response
        '401':
          description: Not Authorized
      x-amazon-apigateway-auth:
        type: none
      x-amazon-apigateway-integration:
        type: http
        httpMethod: put
        uri: http://pav-user-api-924234322.us-east-1.elb.amazonaws.com:8080/user/follow
        requestParameters:
          integration.request.header.Authorization: "method.request.header.Authorization"
        requestTemplates:
          application/json:
        responses:
          200:
            statusCode: "200"
            responseTemplates:
              application/json:
          default:
            statusCode: "401"
            responseTemplates:
              text/plain:
  /user/unfollow:
    delete:
      description: Unfollow a user
      parameters:
        - $ref: "#/parameters/UserFollowBodyParam"
        - $ref: "#/parameters/TokenParam"
      tags:
        - Users
      responses:
        '204':
          description: Successful response
        '401':
          description: Not Authorized
      x-amazon-apigateway-auth:
        type: none
      x-amazon-apigateway-integration:
        type: http
        httpMethod: delete
        uri: http://pav-user-api-924234322.us-east-1.elb.amazonaws.com:8080/user/unfollow
        requestParameters:
          integration.request.header.Authorization: "method.request.header.Authorization"
        requestTemplates:
          application/json:
        responses:
          204:
            statusCode: "204"
            responseTemplates:
              application/json:
          default:
            statusCode: "401"
            responseTemplates:
              text/plain:
      
  /user/token/validate:
    get:
      description: Validate Authentication Token
      parameters:
        - $ref: "#/parameters/TokenBodyParam"
      tags:
        - Users
      responses:
        '200':
          description: Successful response
        '401':
          description: Token invalid
      x-amazon-apigateway-auth:
        type: none
      x-amazon-apigateway-integration:
        type: http
        httpMethod: get
        uri: http://pav-user-api-924234322.us-east-1.elb.amazonaws.com:8080/user/token/validate
        requestParameters:
          integration.request.querystring.token: "method.request.querystring.token"
        requestTemplates:
          application/json:
        responses:
          200:
            statusCode: "200"
            responseTemplates:
              application/json:
          default:
            statusCode: "401"
            responseTemplates:
              text/plain: